// Generated by CoffeeScript 1.11.1
var Setter, emptyFunction, isDev;

emptyFunction = require("emptyFunction");

isDev = require("isDev");

Setter = exports;

Setter.frozen = function(key) {
  if (isDev) {
    return function() {
      throw Error("'" + (key.toString()) + "' is not writable.");
    };
  } else {
    return emptyFunction;
  }
};

Setter.define = function(proxy, arg) {
  var didSet, getter, needsGetter, setter, willSet;
  willSet = arg.willSet, didSet = arg.didSet;
  setter = Setter.wrap(proxy.set, willSet, didSet);
  needsGetter = (proxy.set.length > 1) || (didSet && didSet.length > 1) || (willSet && willSet.length > 1);
  if (needsGetter) {
    getter = proxy.get.safely || proxy.get;
    proxy.set = function(newValue) {
      return setter.call(this, newValue, getter.call(this));
    };
  } else {
    proxy.set = function(newValue) {
      return setter.call(this, newValue);
    };
  }
};

Setter.wrap = function(set, willSet, didSet) {
  if (willSet) {
    if (didSet) {
      return function(newValue, oldValue) {
        newValue = willSet.call(this, newValue, oldValue);
        set.call(this, newValue, oldValue);
        return didSet.call(this, newValue, oldValue);
      };
    }
    return function(newValue, oldValue) {
      newValue = willSet.call(this, newValue, oldValue);
      return set.call(this, newValue, oldValue);
    };
  }
  if (didSet) {
    return function(newValue, oldValue) {
      set.call(this, newValue, oldValue);
      return didSet.call(this, newValue, oldValue);
    };
  }
  return set;
};
