// Generated by CoffeeScript 1.11.1
var Proxy, Setter, define, emptyFunction, injected, isDev, isProto;

emptyFunction = require("emptyFunction");

isProto = require("isProto");

isDev = require("isDev");

injected = require("./injectable");

Setter = require("./Setter");

define = Object.defineProperty;

Proxy = exports;

Proxy.define = function(target, key, config) {
  var proxy, type;
  proxy = {
    enumerable: config.enumerable,
    configurable: config.configurable
  };
  type = config.get ? "stateless" : config.lazy ? "lazy" : config.reactive ? "reactive" : "stateful";
  Proxy[type].call(proxy, config, key, target);
  define(target, key, proxy);
};

Proxy.stateless = function(config, key) {
  this.get = config.get;
  if (this.set = config.set) {
    Setter.define(this, config);
  } else {
    this.set = Setter.frozen(key);
  }
};

Proxy.lazy = function(config, key) {
  var LazyVar, value;
  if (!injected.has("LazyVar")) {
    throw Error("Must inject 'LazyVar' into 'Property' before defining a lazy property!");
  }
  LazyVar = injected.get("LazyVar");
  value = LazyVar(config.lazy);
  this.get = value.get;
  this.set = Setter.frozen(key);
};

Proxy.reactive = function(config, key, target) {
  var ReactiveVar, value;
  if (isProto(target)) {
    throw Error("Cannot define reactive Property on a prototype!");
  }
  if (!injected.has("ReactiveVar")) {
    throw Error("Must inject 'ReactiveVar' into 'Property' before defining a reactive property!");
  }
  ReactiveVar = injected.get("ReactiveVar");
  value = ReactiveVar(config.value, target.constructor.name + "." + key);
  this.get = function() {
    return value.get();
  };
  if (!config.writable) {
    this.set = Setter.frozen(key);
    return;
  }
  this.get.safely = function() {
    return value._value;
  };
  this.set = function(newValue) {
    return value.set(newValue);
  };
  Setter.define(this, config);
};

Proxy.stateful = function(config, key, target) {
  var value;
  value = config.value;
  if (!isProto(target)) {
    if (config.willSet || config.didSet) {
      this.get = function() {
        return value;
      };
      this.set = function(newValue) {
        return value = newValue;
      };
      Setter.define(this, config);
      return;
    }
    if (!config.writable) {
      this.get = function() {
        return value;
      };
      this.set = Setter.frozen(key);
      return;
    }
  }
  this.value = value;
  this.writable = config.writable;
};
